// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.ContextClasses;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240124172018_Mig31")]
    partial class Mig31
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "7943c6a7-91ce-409c-81db-714fbccc1ba1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00cc8a76-dfe8-48c2-afb9-de13e2603f1a",
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 925, DateTimeKind.Utc).AddTicks(1229),
                            Email = "aost@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AOST@GMAIL.COM",
                            NormalizedUserName = "AOST",
                            PasswordHash = "AQAAAAIAAYagAAAAELWMGbBHQv5OpW1nT1wmcRv+bkaF/LkwZpuNJIZovb3FpAhMdyEeBYOH68TDcg/5UQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b5b6c29-3372-40f2-9a53-0f13af766fc3",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "aost"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Cast", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Casts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(99),
                            FirstName = "Christian",
                            LastName = "Bale",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(103),
                            FirstName = "Christopher",
                            LastName = "Nolen",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(104),
                            FirstName = "Heath",
                            LastName = "Ledger",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(105),
                            FirstName = "Aaron",
                            LastName = "Eckhart",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(231),
                            FirstName = "Michael",
                            LastName = "Caine",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(233),
                            FirstName = "Morgon",
                            LastName = "Freeman",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(234),
                            FirstName = "Cillian",
                            LastName = "Murphy",
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(235),
                            FirstName = "Justin",
                            LastName = "Theroux",
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(236),
                            FirstName = "Josh",
                            LastName = "Lucas",
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(238),
                            FirstName = "Reese",
                            LastName = "Witherspoon",
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(239),
                            FirstName = "Samantha",
                            LastName = "Mathis",
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(240),
                            FirstName = "Jared",
                            LastName = "Leto",
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(241),
                            FirstName = "Willem",
                            LastName = "Dafoe",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9939),
                            GenreName = "Drama",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9944),
                            GenreName = "Action",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9946),
                            GenreName = "Adventure",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9947),
                            GenreName = "Animation",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9948),
                            GenreName = "Biography",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9962),
                            GenreName = "Comedy",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9963),
                            GenreName = "Crime",
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9964),
                            GenreName = "Documentary",
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9965),
                            GenreName = "Family",
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9966),
                            GenreName = "Fantasy",
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9967),
                            GenreName = "History",
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9968),
                            GenreName = "Horror",
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9969),
                            GenreName = "Mystery",
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9970),
                            GenreName = "Romance",
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9971),
                            GenreName = "War",
                            Status = 0
                        },
                        new
                        {
                            ID = 16,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9972),
                            GenreName = "Western",
                            Status = 0
                        },
                        new
                        {
                            ID = 17,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9973),
                            GenreName = "Sci-Fi",
                            Status = 0
                        },
                        new
                        {
                            ID = 18,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9974),
                            GenreName = "Sport",
                            Status = 0
                        },
                        new
                        {
                            ID = 19,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 987, DateTimeKind.Utc).AddTicks(9975),
                            GenreName = "Thriller",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(61),
                            MovieName = "The Dark Knight",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(64),
                            MovieName = "American Psycho",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.MovieCast", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("CastID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameInMovie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MovieID", "CastID");

                    b.HasIndex("CastID");

                    b.ToTable("MovieCasts");

                    b.HasData(
                        new
                        {
                            MovieID = 1,
                            CastID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(291),
                            NameInMovie = "Bruce Wayne",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            CastID = 2,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(294),
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            CastID = 3,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(295),
                            NameInMovie = "Joker",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            CastID = 4,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(296),
                            NameInMovie = "Harvey Dent",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            CastID = 5,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(297),
                            NameInMovie = "Alfred",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            CastID = 6,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(299),
                            NameInMovie = "Lucius Fox",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            CastID = 7,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(300),
                            NameInMovie = "Scarecrow",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(301),
                            NameInMovie = "Patrick Bateman",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 8,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(302),
                            NameInMovie = "Timothy Bryce",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 9,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(304),
                            NameInMovie = "Craig McDermott",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 10,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(305),
                            NameInMovie = "Evelyn Williams",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 11,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(306),
                            NameInMovie = "Courtney Rawlinson",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 12,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(307),
                            NameInMovie = "Paul Allen",
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            CastID = 13,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(308),
                            NameInMovie = "Donald Kimball",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MovieID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieID = 1,
                            GenreID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(540),
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            GenreID = 2,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(542),
                            Status = 0
                        },
                        new
                        {
                            MovieID = 1,
                            GenreID = 7,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(543),
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            GenreID = 7,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(543),
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            GenreID = 1,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(544),
                            Status = 0
                        },
                        new
                        {
                            MovieID = 2,
                            GenreID = 12,
                            CreatedDate = new DateTime(2024, 1, 24, 17, 20, 17, 988, DateTimeKind.Utc).AddTicks(546),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("Project.ENTITIES.Models.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.MovieCast", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Cast", "Cast")
                        .WithMany("MovieCasts")
                        .HasForeignKey("CastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.MovieGenre", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Cast", b =>
                {
                    b.Navigation("MovieCasts");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Movie", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("MovieGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
